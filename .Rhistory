done <- F
while(done == F){
if(length(geno) != 32){stop('3')}
geno <- NewGeno(geno=geno,
par=par,
iter=50,
prnt = F,
tol = 10^-5)[[1]]
# geno <- NewGeno(geno=geno,
#                 par=par,
#                 iter="stable",
#                 prnt = F,
#                 tol = 10^-5)[[1]]
if(length(geno) != 32){stop('4')}
test.geno <- NewGeno(geno=geno,
par=par,
iter=100,
prnt = F,
tol = 10^-5)[[1]]
if(sum(abs(test.geno - geno)) < 10^(-4)){
done <- T
}
done <- T
geno <- test.geno
cat('bye')
rm(test.geno)
}
rm(done)
# saving eq freqs
postmut.eq.geno <- list(geno)
nullpar  <- c(1, #cd1
1, #cd2
h.vals[i],   #h1
.5,   #h2
1,   #h3
s.vals[1], #sel
.1,  # reduction due to sex geno mismatch
.1,  # r1
.1,  # r2
.1,  # r3
rf,   #rf
.9,  #gs  #no impact good
.5)   #u   #no impact good
param <- param.assign(par)
nullparam <- param.assign(nullpar)
results <- list(sum(geno[seq(2,32,by = 2)]), sum(gen(gen(geno,param), param, return.fit = T)) -
sum(gen(gen(geno,nullparam), nullparam, return.fit = T)), premut.eq.geno,
postmut.eq.geno)
names(results) <- c('freq', 'detload', 'preeq', 'posteq')
results
}
for(k in 1:(length(loop.results)/4)){
result.matrix[i,k] <- as.numeric(loop.results[[1 + 4*(k - 1)]])
devmatrix[i,k] <- as.numeric(loop.results[[2 + 4*(k - 1)]])
premut.eq.array <- cbind(premut.eq.array, loop.results[[3 +  4*(k-1)]])
postmut.eq.array <- cbind(postmut.eq.array, loop.results[[4 +  4*(k-1)]])
}
}
View(result.matrix)
View(postmut.eq.array)
View(premut.eq.array)
install.packages(doMPI)
install.packages("DOBAD")
install.packages("doMPI")
library(doMPI)
library(ggpubr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(viridis)
library(readr)
load('FinitePopResults_N=300_800_1500_4000_5000_10000.RData')
setwd("~/GitHub/FOY")
load('FinitePopResults_N=300_800_1500_4000_5000_10000.RData')
Ns <- c(300,800,1500, 4000, 5000,10000)
size <- 10
results <- all.dat
Ns <- c(300,800,1500, 4000, 5000,10000)
size <- 10
# new.res <- list()
# for(j in 1:15){
#   if(j <= 12){new.res[[j]] <- one[[j]]}
#   if(j > 12){new.res[[j]] <- results[[j-3]]}
# }
mxx <- -100
mnn <- 100
# load('FinitePopResults_N=300_800_1500_4000_5000.RData')
for(j in 1:18){
if(max(results[[j]]) > mxx){mxx <- max(results[[j]])}
if(min(results[[j]]) < mnn){mnn <- min(results[[j]])}
}
#####
for(i in 1:6){
N <- Ns[i]
mx <- mxx - 1/(2 * 300)
mn <- mnn - 1/(2 * 300)
# this will be the plot of the recombination load
new.dat <- results #load('FinitePopResults.RData')
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 1)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(mn,round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7), mx),
labels=c(round(mn, digits = 7),
round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7),
round(mx, digits = 7)),
limits=c(min(mn,round(min(new.dat$fix.freq), digits = 7)),
max(mx,round(max(new.dat$fix.freq), digits = 7))))
p
if(i == 1) a <- p
if(i == 2) b <- p
if(i == 3) c <- p
if(i == 4) h3 <- p
if(i == 5) h6 <- p
if(i == 6) h9 <- p
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.75, 1, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 2)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'cd.vals', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =cd.vals, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = '% Correct Sex Det.',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(mn,round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7), mx),
labels=c(round(mn, digits = 7),
round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7),
round(mx, digits = 7)),
limits=c(min(mn,round(min(new.dat$fix.freq), digits = 7)),
max(mx,round(max(new.dat$fix.freq), digits = 7))))
p
if(i == 1) d <- p
if(i == 2) e <- p
if(i == 3) f <- p
if(i == 4) h4 <- p
if(i ==5) h7 <- p
if(i == 6) h10 <- p
new.dat <-cbind(rep(seq(.75, 1, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 3)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('cd.vals', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = cd.vals, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = '% Correct Sex Determination',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(mn,round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7), mx),
labels=c(round(mn, digits = 7),
round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7),
round(mx, digits = 7)),
limits=c(min(mn,round(min(new.dat$fix.freq), digits = 7)),
max(mx,round(max(new.dat$fix.freq), digits = 7))))
p
if(i == 1) g <- p
if(i == 2) h <- p
if(i == 3) h2 <- p
if(i == 4) h5 <- p
if(i == 5) h8 <- p
if(i == 6) h11 <- p
}
grid.arrange(a,
d,
g,
b,
e,
h,
c,
f,
h2,
h3,
h4,
h5,
h6,
h7,
h8,
h9,
h10,
h11,
ncol = 3)
library(ggpubr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(viridis)
library(readr)
load('FinitePopResults_N=300_800_1500_4000_5000_10000.RData')
results <- all.dat
Ns <- c(300,800,1500, 4000, 5000,10000)
size <- 10
# new.res <- list()
# for(j in 1:15){
#   if(j <= 12){new.res[[j]] <- one[[j]]}
#   if(j > 12){new.res[[j]] <- results[[j-3]]}
# }
mxx <- -100
mnn <- 100
# load('FinitePopResults_N=300_800_1500_4000_5000.RData')
for(j in 1:18){
if(max(results[[j]]) > mxx){mxx <- max(results[[j]])}
if(min(results[[j]]) < mnn){mnn <- min(results[[j]])}
}
# this will be the plot of the recombination load
#####
for(i in 1:6){
N <- Ns[i]
mx <- mxx - 1/(2 * 300)
mn <- mnn - 1/(2 * 300)
# this will be the plot of the recombination load
new.dat <- results #load('FinitePopResults.RData')
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 1)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(mn,round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7), mx),
labels=c(round(mn, digits = 7),
round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7),
round(mx, digits = 7)),
limits=c(min(mn,round(min(new.dat$fix.freq), digits = 7)),
max(mx,round(max(new.dat$fix.freq), digits = 7))))
p
if(i == 1) a <- p
if(i == 2) b <- p
if(i == 3) c <- p
if(i == 4) h3 <- p
if(i == 5) h6 <- p
if(i == 6) h9 <- p
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.75, 1, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 2)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'cd.vals', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =cd.vals, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = '% Correct Sex Det.',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(mn,round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7), mx),
labels=c(round(mn, digits = 7),
round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7),
round(mx, digits = 7)),
limits=c(min(mn,round(min(new.dat$fix.freq), digits = 7)),
max(mx,round(max(new.dat$fix.freq), digits = 7))))
p
if(i == 1) d <- p
if(i == 2) e <- p
if(i == 3) f <- p
if(i == 4) h4 <- p
if(i ==5) h7 <- p
if(i == 6) h10 <- p
new.dat <-cbind(rep(seq(.75, 1, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 3)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('cd.vals', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = cd.vals, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = '% Correct Sex Determination',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(mn,round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7), mx),
labels=c(round(mn, digits = 7),
round(min(new.dat$fix.freq), digits = 7),
round(max(new.dat$fix.freq), digits = 7),
round(mx, digits = 7)),
limits=c(min(mn,round(min(new.dat$fix.freq), digits = 7)),
max(mx,round(max(new.dat$fix.freq), digits = 7))))
p
if(i == 1) g <- p
if(i == 2) h <- p
if(i == 3) h2 <- p
if(i == 4) h5 <- p
if(i == 5) h8 <- p
if(i == 6) h11 <- p
}
# a
# b
# c
# h3
# h6
# d
# e
# f
# h4
# h7
# g
# h
# h2
# h5
# h8
grid.arrange(a,
d,
g,
b,
e,
h,
c,
f,
h2,
h3,
h4,
h5,
h6,
h7,
h8,
h9,
h10,
h11,
ncol = 3)
# a
# d
# g
# b
# e
# h
# c
# f
# h2
# h3
# h4
# h5
# h6
# h7
# h8
#####
library(ggpubr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(viridis)
library(readr)
load('FinitePopResults_N=300_800_1500_4000_5000_10000.RData')
results <- all.dat
Ns <- c(300,800,1500, 4000, 5000,10000)
size <- 10
for(i in 1:6){
N <- Ns[i]
# this will be the plot of the recombination load
new.dat <- results #load('FinitePopResults.RData')
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 1)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) a <- p
if(i == 2) b <- p
if(i == 3) c <- p
if(i == 4) h3 <- p
if(i == 5) h6 <- p
if(i == 6) h9 <- p
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.75, 1, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 2)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'cd.vals', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =cd.vals, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = '% Correct Sex Det.',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) d <- p
if(i == 2) e <- p
if(i == 3) f <- p
if(i == 4) h4 <- p
if(i ==5) h7 <- p
if(i == 6) h10 <- p
new.dat <-cbind(rep(seq(.75, 1, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 3)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('cd.vals', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = cd.vals, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = '% Correct Sex Determination',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) g <- p
if(i == 2) h <- p
if(i == 3) h2 <- p
if(i == 4) h5 <- p
if(i == 5) h8 <- p
if(i == 6) h11 <-p
}
grid.arrange(a,
d,
g,
b,
e,
h,
c,
f,
h2,
h3,
h4,
h5,
h6,
h7,
h8,
h9,
h10,
h11,
ncol = 3)
