"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
rep.row<-function(x,n){
matrix(rep(x,each=n),nrow=n)
}
##### Fig 1 #####
par(mfrow = c(2,2))
# trees <- trees(pars = c(3,1),
#                        type = "bd",
#                        n = 1,
#                        max.taxa = 30,
#                        include.extinct = F)[[1]]
# trees$edge.length <- trees$edge.length / max(branching.times(trees))
# cont.trait <- sim.char(trees, 0.2, model = 'BM')
# names(cont.trait) <- trees$tip.label
load('Fig1Tree.RData')
load('Fig1ContTrait.RData')
smp <- contMap(trees,cont.trait, ftype = 'off', legend = .5, lims = c(.24,2))
fig_label('A:',cex = 2.5)
# cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# branch.means <- c()
# branch.names <- c()
# for(j in 1:nrow(trees$edge)){
#   node.o.int <- trees$edge[j,1]
#   if(node.o.int <= 30){
#     one <- cont.trait[node.o.int]
#   }else{
#     one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
#   }
#   node.o.int <- trees$edge[j,2]
#   if(node.o.int <= 30){
#     two <- cont.trait[node.o.int]
#   }else{
#     two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
#   }
#   branch.means <- c(branch.means, mean(one, two))
#   branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
# }
# names(branch.means) <- branch.names
# rm(branch.names)
# upper <- summary(branch.means)[[5]]
# lower <- summary(branch.means)[[2]]
# scale.factor <- 50
# alt.tree <- trees
# for(j in 1:length(branch.means)){
#   if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
#   if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
# }
# good.sim <- F
# rate <- .2
# while(good.sim == F){
#   disc.trait <- sim.char(phy = trees,
#                          par = matrix(c(-rate, 0, rate, 0), 2),
#                          model = 'discrete',
#                          root = 1)
#   if(4 < sum(disc.trait == min(disc.trait)) &&
#      sum(disc.trait == min(disc.trait)) < 26){
#     good.sim <- T
#   }
# }
# names(disc.trait) <- trees$tip.label
# anc.state.dt <- make.simmap(trees, disc.trait,
#                             model = matrix(c(0,0,1,0), 2),
#                             nsim = 1,
#                             pi = c(1,0),
#                             message = F)
load('Fig1DiscSimMap.RData')
plotSimmap(anc.state.dt, lwd = 3, ftype = 'off')
legend(x = 'bottomleft', legend = c('Ancestral','Derived'), col = c('black', 'red'), pch = 15, bty = 'n')
fig_label('B:',cex = 2.5)
pies <- array(dim = c(anc.state.dt$Nnode, 3))
pies[1:4,] <- rep.row(c(1,0,0),4)
pies[5,] <- t(c(0,0,1))
pies[6:7,] <- rep.row(c(0,1,0),2)
pies[8:11,] <- rep.row(c(1,0,0),4)
pies[12,] <- t(c(0,0,1))
pies[13:20,] <- rep.row(c(1,0,0),8)
pies[21,] <- t(c(0,0,1))
pies[22:23,] <- rep.row(c(0,1,0),2)
pies[24:29,] <- rep.row(c(1,0,0),6)
plot(trees, tip.color = 'transparent', edge.width = 3)
nodelabels(pie = pies, piecol = c('blue','red','green'),cex = .8)
legend(x = 'bottomleft', legend = c('Ancestral','Derived','Producing (Ancestral)'),
col = c('blue', 'red','green'), pch = 16, bg="transparent", bty = 'n')
fig_label('C:',cex = 2.5)
ss_nodes <- anc.state.dt$mapped.edge[, 1] > 0 &
anc.state.dt$mapped.edge[, 2] > 0
wanted_branches <- ss_nodes[ss_nodes == T]
wanted_nodes <- names(wanted_branches)
wanted_nodes <- gsub(",.*", "", wanted_nodes)
producing.nodes <- unique(wanted_nodes)
anc.states <- anc.ML(trees, cont.trait, model = "BM")
orig.val <- mean(anc.states$ace[names(anc.states$ace) %in% producing.nodes])
null.orig.val <- vector(length = 1000)
number.of.trans <- length(producing.nodes)
anc.dt <- anc.state.dt
anc.ct <- anc.states
node.states <- describe.simmap(anc.dt)$states
anc.cond.nodes <- anc.ct$ace[names(anc.ct$ace) %in% names(node.states)[node.states != '2']]
for (j in 1:1000){
# set.seed(j)
null.orig.val[j] <- mean(sample(anc.cond.nodes,
length(producing.nodes)))
}
par(mar = c(4,4,0,0) + .1)
plot(density(null.orig.val), ylab = 'Frequency', xlab = 'Mean Cont Trait', main = '')
abline(v = orig.val, col = 'red')
legend(x = 'topright', legend = c('Producing','All'), col = c('red', 'black'), pch = 15, bty = 'n')
fig_label('D:',cex = 2.5)
##### Fig 2 #####
par(mfrow = c(1,1), mar = c(5,4,4,2) + .1)
load('AncCondFig2DataPostBlackmon.RData')
x <- rep(1:10, each=100)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
y <- c(y, fig2.data[1:100, i])
}
probs <- vector()
for(i in 1:10){
probs[i] <- paste(as.character(sum(fig2.data[1:100, i] <= .05)),'%')
}
plot(x = x, y = y, xaxt="n",xlab="", ylab= "", pch=16,cex=.7)
mtext(probs, side=3, at=1:10, cex=.7)
mtext(1:10, side=1, at=1:10, cex=.85)
mtext("Scaling Factor", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .05, lty = 2, lwd = .7)
##### Origins Figure ##### ????????
##### Fig 3 #####
load('AncCondFig3DataPostBlackmon.RData')
# data <- cbind(rep(1:10, each = 100),
#               as.vector(fig2.data))
# colnames(data) <- c('Scale.Factor','Pval')
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
y <- c(y, fig3.data[1:100, i])
}
probs <- vector()
for(i in 1:10){
probs[i] <- paste(as.character(sum(fig3.data[1:100, i] <= .05)),'%')
}
plot(x = x, y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.7, xlim=c(10, 210))
mtext(probs,
side=3, at=seq(from=20, to=200, by=20), cex=.7)
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .05, lty = 2, lwd = .7)
##### Fig 4 #####
load('AncCondFig4DataPostBlackmonp3.RData')
x <- rep(1:10, each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig4.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig4.data[i,j], (nchar(gsub(",.*", "",fig4.data[i,j])) + 2),
nchar(fig4.data[i,j])))
}
}
probs <- vector()
probs2 <- c()
for(i in 1:10){
probs[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .025, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
probs2[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .05, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
}
plot(x = x, y = y, xaxt="n",xlab="", ylab= "", pch=16,cex=.6)
mtext(probs, side=3, at=1:10, cex=.7)
# mtext(probs2, side = 3, at = 1:10, cex = .7, line = .6, col = 'red')
mtext(1:10, side=1, at=1:10, cex=.85)
mtext("Scaling Factor", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .025, lty = 2, lwd = .7)
# abline(h = .05, lty = 2, lwd = .7)
##### Fig 5 #####
load('AncCondFig5DataPostBlackmonp3.RData')
# with rate = 3 there is still 14%NA values. Should I go higher??? #
x <- rep(seq(from=20, to=200, by=20), each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig5.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig5.data[i,j], (nchar(gsub(",.*", "",fig5.data[i,j])) + 2),
nchar(fig5.data[i,j])))
}
}
}
probs <- vector()
probs2 <- vector()
for(i in 1:10){
probs[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .025, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
probs2[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .05, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
}
plot(x = x, y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.6, xlim=c(10, 210))
mtext(probs,
side=3, at=seq(from=20, to=200, by=20), cex=.7)
# mtext(probs2,
#       side = 3, at=seq(from=20, to=200, by=20), cex = .7, line = .6)
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .025, lty = 2, lwd = .7)
# abline(h = .05, lty = 2, lwd = .7)
library(ggpubr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(viridis)
library(readr)
load('FinitePopResults_N=300_800_1500_4000_5000_10000.RData')
results <- all.dat
Ns <- c(300,800,1500, 4000, 5000,10000)
size <- 10
for(i in 1:6){
N <- Ns[i]
# this will be the plot of the recombination load
new.dat <- results #load('FinitePopResults.RData')
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 1)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) a <- p
if(i == 2) b <- p
if(i == 3) c <- p
if(i == 4) h3 <- p
if(i == 5) h6 <- p
if(i == 6) h9 <- p
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.75, 1, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 2)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'cd.vals', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =cd.vals, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = '% Correct Sex Det.',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) d <- p
if(i == 2) e <- p
if(i == 3) f <- p
if(i == 4) h4 <- p
if(i ==5) h7 <- p
if(i == 6) h10 <- p
new.dat <-cbind(rep(seq(.75, 1, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 3)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('cd.vals', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = cd.vals, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = '% Correct Sex Determination',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) g <- p
if(i == 2) h <- p
if(i == 3) h2 <- p
if(i == 4) h5 <- p
if(i == 5) h8 <- p
if(i == 6) h11 <-p
}
grid.arrange(a,
d,
g,
b,
e,
h,
c,
f,
h2,
h3,
h4,
h5,
h6,
h7,
h8,
h9,
h10,
h11,
ncol = 3)
library(ggpubr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(viridis)
library(readr)
load('FinitePopResults_N=300_800_1500_4000_5000_10000.RData')
setwd("~/GitHub/FOY")
load('FinitePopResults_N=300_800_1500_4000_5000_10000.RData')
results <- all.dat
Ns <- c(300,800,1500, 4000, 5000,10000)
size <- 10
for(i in 1:6){
N <- Ns[i]
# this will be the plot of the recombination load
new.dat <- results #load('FinitePopResults.RData')
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 1)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) a <- p
if(i == 2) b <- p
if(i == 3) c <- p
if(i == 4) h3 <- p
if(i == 5) h6 <- p
if(i == 6) h9 <- p
new.dat <-cbind(rep(seq(10^-8, 10^-3, length.out = size), size),
rep(seq(.75, 1, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 2)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('mut.rate', 'cd.vals', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = mut.rate, y =cd.vals, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = 'Mutation Rate',
y = '% Correct Sex Det.',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) d <- p
if(i == 2) e <- p
if(i == 3) f <- p
if(i == 4) h4 <- p
if(i ==5) h7 <- p
if(i == 6) h10 <- p
new.dat <-cbind(rep(seq(.75, 1, length.out = size), size),
rep(seq(.05, .4, length.out = size), each = size),
as.vector(results[[(3 * (i-1) + 3)]] - matrix(1/(2 * N), size, size)))
colnames(new.dat) <- c('cd.vals', 'rec.dist', 'fix.freq')
new.dat <- as.data.frame(new.dat)
p <- ggplot(new.dat) +
aes(x = cd.vals, y =rec.dist, z = fix.freq, fill = fix.freq) +
geom_tile() +
# coord_equal() +
theme(aspect.ratio=1) +
# geom_contour(color = 'white', alpha = .5) +
#scale_fill_distiller(palette = 'Spectral', na.value = 'white') +
theme_bw() +
labs(fill = 'Inversion \nfix freq -\n neutral \nfix freq', x = '% Correct Sex Determination',
y = 'Recombination Distance',
title = paste('Freq of Y inv fixation N = ', N)) +
scale_fill_gradientn(colours=viridis(256),
breaks=c(min(new.dat$fix.freq),max(new.dat$fix.freq)),
labels=c(round(min(new.dat$fix.freq), digits = 5),
round(max(new.dat$fix.freq), digits = 5)),
limits=c(min(new.dat$fix.freq),max(new.dat$fix.freq)))
p
if(i == 1) g <- p
if(i == 2) h <- p
if(i == 3) h2 <- p
if(i == 4) h5 <- p
if(i == 5) h8 <- p
if(i == 6) h11 <-p
}
grid.arrange(a,
d,
g,
b,
e,
h,
c,
f,
h2,
h3,
h4,
h5,
h6,
h7,
h8,
h9,
h10,
h11,
ncol = 3)
