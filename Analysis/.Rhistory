c=45
substr(haplotypes[c],3,6)
target.hap <- substr(haplotypes[c],3,6)
target.inv <- nchar(haplotypes[c]) == 7
target.sex <- substr(haplotypes[c],1,1)
haplotypes[c]
target.sex <- substr(haplotypes[c],1,1)
sex <- substr(genotypes[k], 1, 1)
inv <- nchar(genotypes[k]) == 12
dubinv <- nchar(genotypes[k]) == 13
hap1 <- substr(genotypes[k], 3, 6)
hap2 <- substr(genotypes[k], 8, 11)
if(dubinv == T){
hap2 <- substr(genotypes[k], 9, 12)
}
if(sex == target.sex){
# there is no inv in the genotype
if(inv == F && dubinv == F){
# the target hap is not inverted
if(target.inv == F){
# this is the normal case with no inversions.
# if both of the haplotypes in the genotype are the same...
if(hap1 == hap2){
# and if they match the haplotype of interest
if(hap1 == substr(target.hap,1,4)){
# the individual is certain to produce a gamete with the haplo of interest
val <- 1
# otherwise it is impossible
}else{val <- 0}
# this is the case where interesting things happen with recombination
# ie the two haplo of a geno do not match
}else{
# will contain m m1 m2 mm
# for match both match the haplo allele, hap1 match hap2 or mismatch
# mismatch is when the haplo of interest contains an allele not present in geno
alvec <- c()
for(l in 1:4){
if(substr(target.hap,l,l) == substr(hap1, l, l) &&
substr(target.hap,l,l) == substr(hap2, l, l)){
alvec <- c(alvec, 'm')
# when only the 1st half of the geno has an allele matching the haplo
}else if(substr(target.hap,l,l) == substr(hap1, l, l)){
alvec <- c(alvec, 'm1')
# when 2nd geno has an allele matching the haplo of interst
}else if(substr(target.hap,l,l) == substr(hap2, l, l)){
alvec <- c(alvec, 'm2')
# when neither do
}else{alvec <- c(alvec, 'mm')}
}
# FROM HERE DOWN IS PRISTINE - HB
# calculation recom dst
if(sex == 'S'){
if(substr(hap1, 4, 4) == 'R'){
if(substr(hap2, 2, 2) == 'R'){
# RR
r <- dst
}else{
# Rr
r <- dst - dst * dom.fac * red.fac
}
}else{
if(substr(hap2, 2, 2) == 'R'){
# Rr
r <- dst - dst*dom.fac*red.fac
}else{
# rr
r <- dst - dst * red.fac
}
}
}else if(sex == 'D'){
r <- dst
}
# beginning to calculate recombination probs
# if an allele in the haplo is missing it is impossible to make from geno
if('mm' %in% alvec){
val <- 0
# this is the case where the two halves of the geno share no common alleles
}else if(!'m' %in% alvec){
# starting at one half to start multiplying rates because only half the geno is
# capable of forming the haplo of interest
val <- .5
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec[i] == alvec[i - 1]){
val <- val * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
val <- val * r
if(message){cat('r')}
}
}
# this is the case where two halves of geno have a common allele at a single loci
}else if(table(alvec)[names(table(alvec)) == 'm'] == 1){
# if there exists 1 m there are two possible ways to recombine to make
# the haplotype of interest
vals <- c(.5,.5)
# first possible way we will treat the m as an m1
alvec1 <- alvec
alvec1[which(alvec %in% 'm')] <- 'm1'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec1[i] == alvec1[i - 1]){
vals[1] <- vals[1] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[1] <- vals[1] * r
if(message){cat('r')}
}
}
cat('\n\n')
# the second possible way to recombine we will treat the m as m2
alvec2 <- alvec
alvec2[which(alvec %in% 'm')] <- 'm2'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec2[i] == alvec2[i - 1]){
vals[2] <- vals[2] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[2] <- vals[2] * r
if(message){cat('r')}
}
}
val <- sum(vals)
# this is the case where the two halves of the geno have two loci in common
# in this case there are 4 possible ways to recobine and produce the haplo
# of interest
}else if(table(alvec)[names(table(alvec)) == 'm'] == 2){
vals <- c(.5, .5, .5, .5)
alvec1 <- alvec2 <- alvec3 <- alvec4 <- alvec
# in the first possibility we treat both m as m1
alvec1[which(alvec %in% 'm')] <- 'm1'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec1[i] == alvec1[i - 1]){
vals[1] <- vals[1] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[1] <- vals[1] * r
if(message){cat('r')}
}
}
cat('\n\n')
# in the second possibility we treat the first m as m1 and the second as m2
alvec2[which(alvec %in% 'm')[1]] <- 'm1'
alvec2[which(alvec %in% 'm')[2]] <- 'm2'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec2[i] == alvec2[i - 1]){
vals[2] <- vals[2] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[2] <- vals[2] * r
if(message){cat('r')}
}
}
cat('\n\n')
# in the third possibility we treat the first m as m2 and the second as m1
alvec3[which(alvec %in% 'm')[1]] <- 'm2'
alvec3[which(alvec %in% 'm')[2]] <- 'm1'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec3[i] == alvec3[i - 1]){
vals[3] <- vals[3] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[3] <- vals[3] * r
if(message){cat('r')}
}
}
cat('\n\n')
# in the fourth possibility we both m as m2
alvec4[which(alvec %in% 'm')] <- 'm2'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec4[i] == alvec4[i - 1]){
vals[4] <- vals[4] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[4] <- vals[4] * r
if(message){cat('r')}
}
}
val <- sum(vals)
# this is the case where the two halves of the geno have three loci in common
# in this case it does not matter if there is a recom or not, one gamete
# produced will be the haplotype of interest one will not
# there is no 4 m case because this was accounted for when the two halves
# of the geno were equal
}else if(table(alvec)[names(table(alvec)) == 'm'] == 3){
val <- .5
}else(stop(cat('Error',k,c)))
}
# the target hap is inverted
}else if(target.inv == T){
# this case the geno does not contain an inv but the target hap does
# impossible
val <- 0
}
# when one of the haplotypes in the geno is inv. No recom should take place
}else if(inv == T){
if(target.inv == F){
# in this case only hap1 can contribute to the target hap because hap2 is inv
# if there is only one inv
if(hap1 == target.hap){
val <- .5
}else{
# otherwise hap2 contains the inv and no recom will take place so if hap1
# is not the same as the target then the target will not be produced
val <- 0
}
}else if(target.inv == T){
# in this case there is a single inv in the geno so no recom occurs
# the target haplo has this inv so the only way to produce the target
# is if hap2 == target
if(hap2 == target.hap){
val <- .5
}else{
val <- 0
}
}
}else if(dubinv == T){
# in this case recom will take place in the geno but it will only be able to
# produce the target if the target is also inv
if(target.inv == F){
val <- 0
}else{
# this is same as the case when there are no inv in how it is handled. there
# exists recom and it will produce haplo with inv as well
if(hap1 == hap2){
# and if they match the haplotype of interest
if(hap1 == substr(target.hap,1,4)){
# the individual is certain to produce a gamete with the haplo of interest
val <- 1
# otherwise it is impossible
}else{val <- 0}
# this is the case where interesting things happen with recombination
# ie the two haplo of a geno do not match
}else{
# will contain m m1 m2 mm
# for match both match the haplo allele, hap1 match hap2 or mismatch
# mismatch is when the haplo of interest contains an allele not present in geno
alvec <- c()
for(l in 1:4){
if(substr(target.hap,l,l) == substr(hap1, l, l) &&
substr(target.hap,l,l) == substr(hap2, l, l)){
alvec <- c(alvec, 'm')
# when only the 1st half of the geno has an allele matching the haplo
}else if(substr(target.hap,l,l) == substr(hap1, l, l)){
alvec <- c(alvec, 'm1')
# when 2nd geno has an allele matching the haplo of interst
}else if(substr(target.hap,l,l) == substr(hap2, l, l)){
alvec <- c(alvec, 'm2')
# when neither do
}else{alvec <- c(alvec, 'mm')}
}
# FROM HERE DOWN IS PRISTINE - HB
# calculation recom dst
if(sex == 'S'){
if(substr(hap1, 4, 4) == 'R'){
if(substr(hap2, 2, 2) == 'R'){
# RR
r <- dst
}else{
# Rr
r <- dst - dst * dom.fac * red.fac
}
}else{
if(substr(hap2, 2, 2) == 'R'){
# Rr
r <- dst - dst*dom.fac*red.fac
}else{
# rr
r <- dst - dst * red.fac
}
}
}else if(sex == 'D'){
r <- dst
}
# beginning to calculate recombination probs
# if an allele in the haplo is missing it is impossible to make from geno
if('mm' %in% alvec){
val <- 0
# this is the case where the two halves of the geno share no common alleles
}else if(!'m' %in% alvec){
# starting at one half to start multiplying rates because only half the geno is
# capable of forming the haplo of interest
val <- .5
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec[i] == alvec[i - 1]){
val <- val * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
val <- val * r
if(message){cat('r')}
}
}
# this is the case where two halves of geno have a common allele at a single loci
}else if(table(alvec)[names(table(alvec)) == 'm'] == 1){
# if there exists 1 m there are two possible ways to recombine to make
# the haplotype of interest
vals <- c(.5,.5)
# first possible way we will treat the m as an m1
alvec1 <- alvec
alvec1[which(alvec %in% 'm')] <- 'm1'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec1[i] == alvec1[i - 1]){
vals[1] <- vals[1] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[1] <- vals[1] * r
if(message){cat('r')}
}
}
cat('\n\n')
# the second possible way to recombine we will treat the m as m2
alvec2 <- alvec
alvec2[which(alvec %in% 'm')] <- 'm2'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec2[i] == alvec2[i - 1]){
vals[2] <- vals[2] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[2] <- vals[2] * r
if(message){cat('r')}
}
}
val <- sum(vals)
# this is the case where the two halves of the geno have two loci in common
# in this case there are 4 possible ways to recobine and produce the haplo
# of interest
}else if(table(alvec)[names(table(alvec)) == 'm'] == 2){
vals <- c(.5, .5, .5, .5)
alvec1 <- alvec2 <- alvec3 <- alvec4 <- alvec
# in the first possibility we treat both m as m1
alvec1[which(alvec %in% 'm')] <- 'm1'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec1[i] == alvec1[i - 1]){
vals[1] <- vals[1] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[1] <- vals[1] * r
if(message){cat('r')}
}
}
if(message){cat('\n\n')}
# in the second possibility we treat the first m as m1 and the second as m2
alvec2[which(alvec %in% 'm')[1]] <- 'm1'
alvec2[which(alvec %in% 'm')[2]] <- 'm2'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec2[i] == alvec2[i - 1]){
vals[2] <- vals[2] * (1 - r)
if(message){cat('1-r')}
# if m1 to m2 then recom must occur
}else{
vals[2] <- vals[2] * r
if(message){cat('r')}
}
}
cat('\n\n')
# in the third possibility we treat the first m as m2 and the second as m1
alvec3[which(alvec %in% 'm')[1]] <- 'm2'
alvec3[which(alvec %in% 'm')[2]] <- 'm1'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec3[i] == alvec3[i - 1]){
vals[3] <- vals[3] * (1 - r)
if(message)cat('1-r')
# if m1 to m2 then recom must occur
}else{
vals[3] <- vals[3] * r
if(message)cat('r')
}
}
cat('\n\n')
# in the fourth possibility we both m as m2
alvec4[which(alvec %in% 'm')] <- 'm2'
for(i in 2:4){
# if m1 -> m1 then there cannot be a recom event
if(alvec4[i] == alvec4[i - 1]){
vals[4] <- vals[4] * (1 - r)
if(message)cat('1-r')
# if m1 to m2 then recom must occur
}else{
vals[4] <- vals[4] * r
if(message)cat('r')
}
}
val <- sum(vals)
# this is the case where the two halves of the geno have three loci in common
# in this case it does not matter if there is a recom or not, one gamete
# produced will be the haplotype of interest one will not
# there is no 4 m case because this was accounted for when the two halves
# of the geno were equal
}else if(table(alvec)[names(table(alvec)) == 'm'] == 3){
val <- .5
}else(stop(cat('Error',k,c)))
}
}
}
}else {val <- 0}
x == target.sex
sex == target.sex
source('C:/Users/19726/Desktop/GitHub/FOY/Analysis/StochasticInternalFunctions.R')
dst = .2
red.fac = .8
dom.fac = .5
haplotypes <- c('XGAR',
'XGAr',
'XGaR',
'XGar',
'XgAR',
'XgAr',
'XgaR',
'Xgar',
'YGAR',
'YGAr',
'YGaR',
'YGar',
'YgAR',
'YgAr',
'YgaR',
'Ygar',
'YGARi',
'YGAri',
'YGaRi',
'YGari',
'YgARi',
'YgAri',
'YgaRi',
'Ygari')
# creating vector of genotypes
genotypes <- c()
for(i in 1:24){
for(j in i:24){
# every haplotype pairs with itself and every haplotype that
# occurs later in the vector to eliminate reverse repeats
genotypes <- c(genotypes,paste(haplotypes[i],haplotypes[j]))
}
}
haplotypes <- c(paste('S', haplotypes), paste('D', haplotypes))
#   }
#   if(substr(genotypes[k], 6, 6) == 'Y' && substr(genotypes[k], 1, 1) == 'Y'){
#     doubinvgeno <- c(doubinvgeno, paste(paste(substr(genotypes[k], 1, 4), 'i',
#                                               sep = ''), paste(
#                                                 substr(genotypes[k], 6, 9), 'i',
#                                                 sep = '')))
#   }
# }
# genotypes <- c(genotypes, invgeno, doubinvgeno)
# doubling genotypes and assigning sex
genotypes <- c(paste("S", genotypes), paste("D", genotypes))
# this will contain the recombination probs
rectable <- array(dim = c(length(genotypes),length(haplotypes)))
rownames(rectable) <- genotypes
colnames(rectable) <- haplotypes
target.hap <- 'XgAr'
targer.inv = F
target.sex = S
target.sex = 'S'
sex = S
sex = 'S'
inv = F
dubinv = F
hap1 = YGAr
hap2 = 'XgAr'
hap1 = 'YGAr'
sex == target.sex
inv == F && dubinv == F
target.inv == F
targer.inv = target.inv
target.inv = targer.inv
rm(targer.inv)
target.inv == F
hap1 == hap2
# will contain m m1 m2 mm
# for match both match the haplo allele, hap1 match hap2 or mismatch
# mismatch is when the haplo of interest contains an allele not present in geno
alvec <- c()
for(l in 1:4){
if(substr(target.hap,l,l) == substr(hap1, l, l) &&
substr(target.hap,l,l) == substr(hap2, l, l)){
alvec <- c(alvec, 'm')
# when only the 1st half of the geno has an allele matching the haplo
}else if(substr(target.hap,l,l) == substr(hap1, l, l)){
alvec <- c(alvec, 'm1')
# when 2nd geno has an allele matching the haplo of interst
}else if(substr(target.hap,l,l) == substr(hap2, l, l)){
alvec <- c(alvec, 'm2')
# when neither do
}else{alvec <- c(alvec, 'mm')}
}
sex == 'S'
substr(hap1, 4, 4) == 'R'
substr(hap1, 4, 4)
substr(hap2, 2, 2)
